{"version":3,"sources":["utils/FilterParams.ts","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","utils/Input.ts","utils/FilterTodos.ts","index.tsx"],"names":["TodoStatus","TodoItem","todo","isSelected","onSelect","isOpenModal","className","classNames","id","completed","title","onClick","type","TodoList","todos","setIsOpenModal","setSelectedTodo","selectedTodo","map","selectedTodoItem","TodoFilter","filter","onFilterChange","inputValue","onInputChange","clearInput","value","onChange","Object","values","status","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","setIsOpedModal","useState","selectedUser","setSelectedUser","useEffect","userId","catch","href","email","name","App","setTodos","All","filterStatus","setFilterStatus","searchQuery","setSearchQuery","isLoading","setIsLoading","fetchData","a","data","console","error","seachTodo","inputQuery","visibleTodos","toLowerCase","includes","trim","search","useMemo","todosList","Active","Completed","filterTodos","event","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9cdcb610.chunk.js","sourcesContent":["export enum TodoStatus {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","// TodoItem.tsx\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo;\n  isSelected: boolean;\n  onSelect: (todo: Todo | null) => void;\n  isOpenModal: boolean;\n};\n\nexport const TodoItem: React.FC<Props> = ({\n  todo,\n  isSelected,\n  onSelect,\n  isOpenModal,\n}) => {\n  const handleTodoChosen = () => {\n    if (!isOpenModal) {\n      onSelect(todo);\n    }\n  };\n\n  return (\n    <tr\n      data-cy=\"todo\"\n      className={classNames({\n        'has-background-info-light': isSelected,\n      })}\n    >\n      <td className=\"is-vcentered\">{todo.id}</td>\n      <td className=\"is-vcentered\">\n        {todo.completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n      <td className=\"is-vcentered is-expanded\">\n        <p\n          className={classNames({\n            'has-text-success': todo.completed,\n            'has-text-danger': !todo.completed,\n          })}\n        >\n          {todo.title}\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          onClick={handleTodoChosen}\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n        >\n          <span className=\"icon\">\n            <i\n              className={classNames('far', {\n                'fa-eye': !isSelected,\n                'fa-eye-slash': isSelected,\n              })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\ntype Props = {\n  todos: Todo[];\n  setIsOpenModal: (newValue: boolean) => void;\n  setSelectedTodo: (newValue: Todo | null) => void;\n  selectedTodo: Todo | null;\n  isOpenModal: boolean;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  setIsOpenModal,\n  setSelectedTodo,\n  selectedTodo,\n  isOpenModal,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map((todo) => (\n          <TodoItem\n            key={todo.id}\n            todo={todo}\n            isSelected={selectedTodo?.id === todo.id}\n            onSelect={(selectedTodoItem) => {\n              setIsOpenModal(true);\n              setSelectedTodo(selectedTodoItem);\n            }}\n            isOpenModal={isOpenModal}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { TodoStatus } from '../../utils/FilterParams';\n\ntype Props = {\n  filter: TodoStatus,\n  onFilterChange: (event: React.ChangeEvent<HTMLSelectElement>) => void,\n  inputValue: string,\n  onInputChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  clearInput: () => void;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  filter,\n  onFilterChange,\n  inputValue,\n  onInputChange,\n  clearInput,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filter}\n            onChange={onFilterChange}\n          >\n            {Object.values(TodoStatus).map((status) => (\n              <option key={status} value={status}>\n                {status}\n              </option>\n            ))}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          value={inputValue}\n          onChange={onInputChange}\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {inputValue && (\n            <button\n              aria-label=\"button delete\"\n              onClick={clearInput}\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\ntype Props = {\n  setIsOpedModal: (newValue: boolean) => void;\n  selectedTodo: Todo | null;\n  setSelectedTodo: (newValue: Todo | null) => void;\n\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  setIsOpedModal,\n  selectedTodo,\n  setSelectedTodo,\n}) => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    if (selectedTodo?.userId) {\n      getUser(selectedTodo.userId)\n        .then(setSelectedUser)\n        .catch(() => {\n          setSelectedUser(null);\n        });\n    } else {\n      setSelectedUser(null);\n    }\n  }, [selectedTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!selectedUser ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo?.id}`}\n            </div>\n            <button\n              aria-label=\"button delete\"\n              onClick={() => {\n                setIsOpedModal(false);\n                setSelectedTodo(null);\n              }}\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo?.completed\n                ? (<strong className=\"has-text-success\">Done</strong>)\n                : (<strong className=\"has-text-danger\">Planned</strong>)}\n\n              {' by '}\n              <a href={`mailto:${selectedUser?.email}`}>\n                {selectedUser?.name}\n              </a>\n\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { TodoStatus } from './utils/FilterParams';\nimport { filterTodos } from './utils/FilterTodos';\nimport { search } from './utils/Input';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [filterStatus, setFilterStatus] = useState(TodoStatus.All);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isOpenModal, setIsOpenModal] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const data = await getTodos();\n\n        setTodos(data);\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error('Error fetching todos:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const handleFilterChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setFilterStatus(event.target.value as TodoStatus);\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchQuery(event.target.value);\n  };\n\n  const clearInput = () => {\n    setSearchQuery('');\n  };\n\n  const visibleTodos = useMemo(() => filterTodos(filterStatus, todos), [filterStatus, todos]);\n\n  const seachTodo = search(searchQuery, visibleTodos);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                onFilterChange={handleFilterChange}\n                filter={filterStatus}\n                inputValue={searchQuery}\n                onInputChange={handleInputChange}\n                clearInput={clearInput}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={seachTodo}\n                  setIsOpenModal={setIsOpenModal}\n                  isOpenModal={isOpenModal}\n                  setSelectedTodo={setSelectedTodo}\n                  selectedTodo={selectedTodo}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {selectedTodo && (\n        <TodoModal\n          setIsOpedModal={setIsOpenModal}\n          selectedTodo={selectedTodo}\n          setSelectedTodo={setSelectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import { Todo } from '../types/Todo';\n\nexport function search(inputQuery: string, visibleTodos: Todo[]) {\n  if (inputQuery === '') {\n    return visibleTodos;\n  }\n\n  return visibleTodos.filter(todo => todo.title.toLowerCase()\n    .includes(inputQuery.toLowerCase().trim()));\n}\n","import { Todo } from '../types/Todo';\nimport { TodoStatus } from './FilterParams';\n\nexport function filterTodos(status: TodoStatus, todosList: Todo[]) {\n  switch (status) {\n    case TodoStatus.Active:\n      return todosList.filter(todo => !todo.completed);\n    case TodoStatus.Completed:\n      return todosList.filter(todo => todo.completed);\n    default:\n      return todosList;\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}